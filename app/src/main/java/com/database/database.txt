Application Work Flow

1. Create User
    User_id = registerUser(firstName, lastName, email, password, avatar?)
2. Create Profile from Survey Results
    Profile_id = createProfile(User_id, bodyType, fitnessLevel, fitnessGoals)
3. Create FitnessPlan from Survey Results
    FitnessPlan_id = createFitnessPlan(User_id, name)
4. Add Exercises to User's FitnessPlan ( fitnessPlanExercises = Exercises joined to FitnessPlan)
    insertFitnessPlanExercise(FitnessPlan_id, Exercise_id)
    OR
    insertExercisesToFitnessPlan(FitnessPlan.id, [List of Exercises])
5. Start a workout using fitness plan
    1. Find User's Fitness plans
        [List of User's Plans] = getFitnessPlansByUserId(User.id)
    2. Choose a plan and Create a new Workout entry
        FitnessPlan from [List of User's Plans]
        Workout = startWorkout(User_id, FitnessPlan.id, date)
    3. Get list of exercises from Fitness plan exercises
        [List of FitnessPlanExercises] = getExercisesByFitnessPlan(FitnessPlan.id)
    3. Add FitnessPlanExercises to Workout ( Create WorkoutExercises )
        createWorkoutExercisesFromFitnessPlan(Workout_id, [List of FitnessPlanExercises])
    4. Get list of workout exercises from workout
        [List of WorkoutExercises] = getWorkoutExercisesForWorkout(Workout.id)
    5. Log a set of a workout exercise, creates a set entry
        logSet(WorkoutExercise_id, reps, weight, time, intensity)
6. For stats/summary page
    Use any of the get functions to get the necessary data

Access the database by importing the Graph object
CRUD functionality is achieved through the repository functions
The ViewModel layer is the most common and recommended place for interacting with repositories, but is not mandatory.

Example:
Accessing WorkoutRepository from Graph in an Activity or any other class
val workoutRepository = Graph.workoutRepository
Example: Fetch workouts
CoroutineScope(Dispatchers.Main).launch {
    val workouts = workoutRepository.getAllWorkouts()
    // Do something with the workouts data
}